# gitlab ci support
# - build angular app
# - deploy to s3 bucket
# - backup s3 bucket
# - invalidate cloudfront

stages:
  - build
  - deploy

build:
  stage: build
  image: node:16.15.0-alpine
  services:
    - name: node:16.15.0-alpine
      alias: node
      command: ['--tls=false']
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
      variables:
        DEPLOY_TAG: 'latest'
      when: manual
    - if: $CI_COMMIT_REF_NAME == 'development'
      variables:
        DEPLOY_TAG: 'latest'
      when: manual
    - if: $CI_COMMIT_REF_NAME != 'main' && $CI_COMMIT_REF_NAME != 'development'
      when: never
  script:
    - npm install
    - npm run build-dev
  artifacts:
    paths:
      - dist/zet-admin/browser
    expire_in: 1h

deploy:
  only:
    - development
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: ['']
  when: on_success
  needs:
    - build
  tags:
    - docker
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
  script:
    - aws --version
    - if aws s3 ls s3://$AWS_S3_BUCKET_NAME/BACKUP/ > /dev/null 2>&1; then aws s3 rm s3://$AWS_S3_BUCKET_NAME/BACKUP/ --recursive; else aws s3api put-object --bucket $AWS_S3_BUCKET_NAME --key BACKUP/; fi
    - aws s3 mv s3://$AWS_S3_BUCKET_NAME/ s3://$AWS_S3_BUCKET_NAME/BACKUP/ --recursive --exclude "BACKUP/*"
    - aws s3 cp --recursive dist/zet-admin/browser s3://$AWS_S3_BUCKET_NAME/ --acl public-read
    - aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
  artifacts:
    paths:
      - dist/zet-admin/browser
